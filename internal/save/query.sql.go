// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package save

import (
	"context"
	"time"
)

const addShift = `-- name: AddShift :exec
;

INSERT INTO shift(person, start_at, end_before)
VALUES (?,?,?)
`

type AddShiftParams struct {
	Person    string
	StartAt   time.Time
	EndBefore time.Time
}

func (q *Queries) AddShift(ctx context.Context, arg AddShiftParams) error {
	_, err := q.db.ExecContext(ctx, addShift, arg.Person, arg.StartAt, arg.EndBefore)
	return err
}

const listAllShifts = `-- name: ListAllShifts :many
SELECT person, start_at, end_before FROM shift
WHERE datetime(start_at) < ?
AND datetime(end_before) > ?
`

type ListAllShiftsParams struct {
	StartAt   time.Time
	EndBefore time.Time
}

func (q *Queries) ListAllShifts(ctx context.Context, arg ListAllShiftsParams) ([]Shift, error) {
	rows, err := q.db.QueryContext(ctx, listAllShifts, arg.StartAt, arg.EndBefore)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shift
	for rows.Next() {
		var i Shift
		if err := rows.Scan(&i.Person, &i.StartAt, &i.EndBefore); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShiftsForPerson = `-- name: ListShiftsForPerson :many
;

SELECT person, start_at, end_before FROM shift
WHERE datetime(start_at) < ?
AND datetime(end_before) > ?
AND person = ?
`

type ListShiftsForPersonParams struct {
	StartAt   time.Time
	EndBefore time.Time
	Person    string
}

func (q *Queries) ListShiftsForPerson(ctx context.Context, arg ListShiftsForPersonParams) ([]Shift, error) {
	rows, err := q.db.QueryContext(ctx, listShiftsForPerson, arg.StartAt, arg.EndBefore, arg.Person)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shift
	for rows.Next() {
		var i Shift
		if err := rows.Scan(&i.Person, &i.StartAt, &i.EndBefore); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
