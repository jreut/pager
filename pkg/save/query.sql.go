// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package save

import (
	"context"
	"time"
)

const addEvent = `-- name: AddEvent :exec
INSERT INTO event(person, schedule, kind, at)
VALUES (?, ?, ?, ?)
`

type AddEventParams struct {
	Person   string
	Schedule string
	Kind     string
	At       time.Time
}

func (q *Queries) AddEvent(ctx context.Context, arg AddEventParams) error {
	_, err := q.db.ExecContext(ctx, addEvent,
		arg.Person,
		arg.Schedule,
		arg.Kind,
		arg.At,
	)
	return err
}

const addInterval = `-- name: AddInterval :exec
INSERT INTO interval(person, schedule, start_at, end_before, kind)
VALUES (?, ?, ?, ?, ?)
`

type AddIntervalParams struct {
	Person    string
	Schedule  string
	StartAt   time.Time
	EndBefore time.Time
	Kind      string
}

func (q *Queries) AddInterval(ctx context.Context, arg AddIntervalParams) error {
	_, err := q.db.ExecContext(ctx, addInterval,
		arg.Person,
		arg.Schedule,
		arg.StartAt,
		arg.EndBefore,
		arg.Kind,
	)
	return err
}

const addPerson = `-- name: AddPerson :exec
INSERT OR IGNORE INTO person(handle) VALUES (?)
`

func (q *Queries) AddPerson(ctx context.Context, handle string) error {
	_, err := q.db.ExecContext(ctx, addPerson, handle)
	return err
}

const addSchedule = `-- name: AddSchedule :exec
INSERT INTO schedule(name) VALUES (?)
`

func (q *Queries) AddSchedule(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, addSchedule, name)
	return err
}

const listEvents = `-- name: ListEvents :many
SELECT person, schedule, kind, at FROM event WHERE schedule = ? ORDER BY at ASC
`

func (q *Queries) ListEvents(ctx context.Context, schedule string) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents, schedule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.Person,
			&i.Schedule,
			&i.Kind,
			&i.At,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
